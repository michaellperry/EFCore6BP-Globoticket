
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    version: 8.0.x

- task: DotNetCoreCLI@2
  displayName: 'Install EF tools'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install --global dotnet-ef'

- task: DotNetCoreCLI@2
  displayName: 'Compile EF model'
  env:
    GLOBOTICKET_ADMIN_CONNECTION_STRING: 'Server=tcp:mssql;Database=GloboTicket;User=sa;Password=notused;TrustServerCertificate=True;'
  inputs:
    command: 'custom'
    custom: 'ef'
    arguments: 'dbcontext optimize -p ./GloboTicket.Infrastructure -s ./GloboTicket.API'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: 'GloboTicket.UnitTest/GloboTicket.UnitTest.csproj'
    arguments: '--configuration Release --no-build'

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'GloboTicket.API/GloboTicket.API.csproj'
    arguments: '-o $(Build.ArtifactStagingDirectory)/Output'
    zipAfterPublish: true
    modifyOutputPath: true

- task: Docker@2
  inputs:
    containerRegistry: 'GloboTicket Registry'
    repository: 'globoticket-migration'
    command: 'buildAndPush'
    Dockerfile: 'Migrations/Dockerfile'
    buildContext: '$(System.DefaultWorkingDirectory)'
    tags: '$(Build.BuildNumber)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'